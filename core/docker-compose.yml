services:
  mg_bot_db:
    container_name: "mg_bot_db"
    hostname: mg_bot_db
    image: postgres:17.2
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "10002:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - mg_bot_postgres:/var/lib/postgresql/data
    networks:
      mg_bot-net:

  mg_bot_redis:
    image: redis:latest
    container_name: mg_bot_redis
    restart: unless-stopped
    ports:
      - "10003:6379"
    networks:
      mg_bot-net:

#
#  mg_bot_django:
#    build: .
#    container_name: mg_bot_django
#    command: >
#      sh -c "python manage.py makemigrations &&
#             python manage.py migrate &&
#             python manage.py collectstatic --noinput &&
#             gunicorn your_project.wsgi:application --bind 0.0.0.0:8000 --workers 4"
#    env_file:
#      - .env
#    environment:
#      DJANGO_SETTINGS_MODULE: core.settings.production
#      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
#      REDIS_URL: redis://redis:6379/0
#    restart: unless-stopped
#    ports:
#      - "10001:8000"
#    depends_on:
#      - mg_bot_db
##      - mg_bot_redis
#    volumes:
#      - mg_static_data:/app/static
#      - mg_media_data:/app/media
#    networks:
#      mg_bot-net:
#  mg_bot_nginx:
#    image: nginx:latest
#    container_name: mg_bot_nginx
#    ports:
#      - "7000:80"
#    depends_on:
#      - mg_bot_django
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
#      - mg_static_data:/app/static
#      - mg_media_data:/app/media
#    networks:
#      mg_bot-net:

#  celery-worker:
#    build: django/
#    container_name: mg_bot_celery-worker
#    restart: unless-stopped
#    env_file: .env.prod
#    volumes:
#      - media_data:/app/media
#      - mg_db_backup:/app/backups

#    command: celery -A app worker --loglevel=info
#    depends_on:
#      - mg_bot_redis
#    networks:
#      mg_bot-net:
#
#  celery-beat:
#    build: django/
#    container_name: mg_bot_celery-beat
#    restart: unless-stopped
#    env_file: .env.prod
#    volumes:
#      - media_data:/app/media
#    command: celery -A app beat --loglevel=info
#    depends_on:
#      - mg_bot_redis
#    networks:
#      mg_bot-net:

networks:
  mg_bot-net:
    driver: bridge

volumes:
  mg_bot_postgres:
  mg_static_data:
    labels:
      ru.mg_bot.description: "Volume for static files"
  mg_media_data:
    labels:
      ru.mg_bot.description: "Volume for Media files"
  mg_db_backup: