import logging
import typing
from abc import ABC, abstractmethod
from django.db import transaction
from allauth.socialaccount.models import SocialAccount
from asgiref.sync import sync_to_async
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from g_cup_site.models import StageModel, StageResultModel
from gymkhanagp.models import (
    UserSubscription,
    SportsmanClassModel,
    Subscription,
    CompetitionTypeModel,
)
from telegram_bot.states import States
from telegram_bot.utils.math_calculate import (
    ClassCoefficientManager,
    StageService,
    TimeConverter,
)
from telegram_bot.utils.messages import MessageTimeTableFormatter
from users.models import SourceReports, TypeReport
from users.utils import get_user_by_telegram_id, ReportHandler

logger = logging.getLogger(__name__)


class BaseHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π"""

    COMPETITION_TYPE: typing.Optional[str] = None
    STATE: typing.Optional[States] = None

    @property
    @abstractmethod
    def button_text(self) -> str:
        pass

    @property
    @abstractmethod
    def button(self) -> KeyboardButton:
        pass

    @abstractmethod
    async def handle(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> typing.Optional[States]:
        pass

    @staticmethod
    async def get_keyboard(
        subscribed_classes: typing.List[str],
    ) -> typing.List[typing.List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏–ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        try:
            classes = await SportsmanClassModel.objects.all().alist()
        except AttributeError:
            classes = await sync_to_async(list)(SportsmanClassModel.objects.all())

        keyboard = []
        row = []
        for i, cls in enumerate(classes, 1):
            prefix = cls.subscribe_emoji if cls.name in subscribed_classes else "üî≤"
            row.append(f"{prefix} {cls.name}")
            if i % 3 == 0 or i == len(classes):
                keyboard.append(row)
                row = []
        return keyboard

    @staticmethod
    async def _handle_back(
        update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—ç–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        –∞ –ø–æ–∫–∞ —ç—Ç–æ —Å—Ç–∞—Ç–∏–∫–º–µ—Ç–æ–¥
        """
        from telegram_bot.manager import KeyboardManager

        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=KeyboardManager().get_main_keyboard()
        )
        return States.MAIN_MENU


class SubscriptionHandlerMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã"""

    async def _get_user_subscriptions(
        self, subscription: UserSubscription
    ) -> typing.List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return [
            sc.name
            async for sc in SportsmanClassModel.objects.filter(
                subscription__user_subscription=subscription,
                subscription__competition_type__name=self.COMPETITION_TYPE,
            )
        ]

    async def _toggle_subscription(
        self,
        subscription: UserSubscription,
        sportsman_class: SportsmanClassModel,
        competition_name: str,
    ) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        with transaction.atomic():
            competition = await CompetitionTypeModel.objects.filter(
                name=competition_name
            ).afirst()
            is_subscribed = await Subscription.objects.filter(
                user_subscription=subscription,
                sportsman_class=sportsman_class,
                competition_type=competition,
            ).aexists()

            if is_subscribed:
                await Subscription.objects.filter(
                    user_subscription=subscription,
                    sportsman_class=sportsman_class,
                ).adelete()
                return False
            else:
                await Subscription.objects.acreate(
                    user_subscription=subscription,
                    sportsman_class=sportsman_class,
                    competition_type=competition,
                )
                return True


class TrackHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã —ç—Ç–∞–ø–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"""

    @property
    def button_text(self) -> str:
        return "üó∫Ô∏è –í—ã—Å–ª–∞—Ç—å –∫–∞—Ä—Ç—É GGP"

    @property
    def button(self) -> KeyboardButton:
        return KeyboardButton(self.button_text)

    async def handle(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        active_stage = await StageModel.objects.filter(
            status__in=("judging", "accepting")
        ).afirst()

        if active_stage and active_stage.track_url:
            await update.message.reply_photo(
                photo=active_stage.track_url,
                caption=f"{active_stage.title}\nhttps://gymkhana-cup.ru/competitions/special-stage?id={active_stage.stage_id}",
            )
        else:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π")

        return States.MAIN_MENU


class TimeTableGGPHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —ç—Ç–∞–ø–∞"""

    def __init__(
        self,
    ):
        self.stage_service = StageService()
        self.coefficient_manager = ClassCoefficientManager()
        self.message_formatter = MessageTimeTableFormatter(TimeConverter())

    @property
    def button_text(self) -> str:
        return "–ü–æ–ª—É—á–∏—Ç—å üïó —ç—Ç–∞–ø–∞"

    @property
    def button(self) -> KeyboardButton:
        return KeyboardButton(self.button_text)

    async def handle(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if not (active_stage := await self.stage_service.get_active_stage()):
                await update.message.reply_text("üèúÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π")
                return States.MAIN_MENU

            if not (
                best_result := await self.stage_service.get_best_result(active_stage)
            ):
                await update.message.reply_text("üèúÔ∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ üèúÔ∏è")
                return States.MAIN_MENU

            base_time = self._calculate_base_time(best_result)
            sportsman_class: SportsmanClassModel = (
                await SportsmanClassModel.objects.filter(
                    name=best_result.user.sportsman_class
                ).afirst()
            )

            message = f"–õ–∏–¥–µ—Ä: {sportsman_class.subscribe_emoji} {sportsman_class.name} - {best_result.user.full_name}\n"
            message += f"–í—Ä–µ–º—è: {best_result.result_time}\n"
            message += self.message_formatter.format_time_ranges(base_time)

            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

        return States.MAIN_MENU

    def _calculate_base_time(self, result: StageResultModel) -> int:
        """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–ª–∞—Å—Å–∞"""
        coefficient = self.coefficient_manager.get_coefficient(
            result.user.sportsman_class if result.user else None
        )
        return int(result.result_time_seconds / coefficient)


class BaseSubscriptionHandler(BaseHandler, SubscriptionHandlerMixin):
    """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫"""

    SELECTION_TEXT: str = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:"
    COMPETITION_NAME: str = None

    async def handle(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        user = update.effective_user
        social_account = await SocialAccount.objects.filter(uid=str(user.id)).afirst()

        if not social_account:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return States.MAIN_MENU

        subscription, _ = await UserSubscription.objects.aget_or_create(
            user=social_account.user, defaults={"is_active": True, "source": "telegram"}
        )

        subscribed_classes = await self._get_user_subscriptions(subscription)
        keyboard = await self.get_keyboard(subscribed_classes)
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])

        await update.message.reply_text(
            self.SELECTION_TEXT,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )

        context.user_data["subscription_id"] = subscription.id
        return self.STATE


class GGPSubscriptionHandler(BaseSubscriptionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ GGP –∫–ª–∞—Å—Å—ã"""

    COMPETITION_TYPE = "ggp"
    STATE = States.CLASS_SELECTION
    SELECTION_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:"
    COMPETITION_NAME = "ggp"

    @property
    def button_text(self) -> str:
        return "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ GGP –∫–ª–∞—Å—Å—ã"

    @property
    def button(self) -> KeyboardButton:
        return KeyboardButton(self.button_text)


class BaseFigureSubscriptionHandler(BaseSubscriptionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã"""

    COMPETITION_TYPE = "base"
    STATE = States.BASE_CLASS_SELECTION
    SELECTION_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å:"
    COMPETITION_NAME = "base"

    @property
    def button_text(self) -> str:
        return "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã"

    @property
    def button(self) -> KeyboardButton:
        return KeyboardButton(self.button_text)


class BaseSelectionHandler(BaseHandler, SubscriptionHandlerMixin):
    """–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""

    COMPETITION_NAME: str = None
    ACTION_TEXT_SUBSCRIBED = "–ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–ª–∞—Å—Å"
    ACTION_TEXT_UNSUBSCRIBED = "–æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –∫–ª–∞—Å—Å–∞"

    @property
    def button_text(self) -> str:
        return ""

    @property
    def button(self) -> KeyboardButton:
        return KeyboardButton(self.button_text)

    async def handle(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        text = update.message.text
        if text == "üîô –ù–∞–∑–∞–¥":
            return await self._handle_back(update, context)

        return await self._process_class_selection(update, context)

    async def _process_class_selection(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        class_name = update.message.text[2:].strip()
        subscription_id = context.user_data.get("subscription_id")

        if not subscription_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return States.MAIN_MENU

        try:
            sportsman_class = await SportsmanClassModel.objects.aget(name=class_name)
            subscription = await UserSubscription.objects.aget(pk=subscription_id)

            is_subscribed = await self._toggle_subscription(
                subscription, sportsman_class, self.COMPETITION_NAME
            )

            await self._update_interface(
                update, subscription, is_subscribed, class_name
            )
            return self.STATE

        except SportsmanClassModel.DoesNotExist:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å")
            return self.STATE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {self.__class__.__name__}: {str(e)}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return States.MAIN_MENU

    async def _update_interface(
        self,
        update: Update,
        subscription: UserSubscription,
        is_subscribed: bool,
        class_name: str,
    ):
        subscribed_classes = await self._get_user_subscriptions(subscription)
        keyboard = await self.get_keyboard(subscribed_classes)
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])

        action = (
            self.ACTION_TEXT_SUBSCRIBED
            if is_subscribed
            else self.ACTION_TEXT_UNSUBSCRIBED
        )
        await update.message.reply_text(
            f"–í—ã {action} - {class_name}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )


class BugReportHandler(BaseHandler):
    @property
    def button_text(self) -> str:
        return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å üêû –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç"

    @property
    def button(self) -> KeyboardButton:
        return KeyboardButton(self.button_text)

    async def handle(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> States:
        user = get_user_by_telegram_id(update.effective_user.id)
        text = update.message.text
        success, message = await ReportHandler.handle_report(
            user=user,
            text=text,
            source=SourceReports.TELEGRAM,
            type_report=TypeReport.BUG,
        )
        if success:
            await update.message.reply_text("–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–∞–≥-report üêû")
            return States.MAIN_MENU

        await update.message.reply_text(message)
        return States.BUG_REPORT_WAIT


class GGPSelectionHandler(BaseSelectionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ GGP –∫–ª–∞—Å—Å–∞"""

    COMPETITION_TYPE = "ggp"
    STATE = States.CLASS_SELECTION
    COMPETITION_NAME = "ggp"
    ACTION_TEXT_SUBSCRIBED = "–ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ GGP –∫–ª–∞—Å—Å"
    ACTION_TEXT_UNSUBSCRIBED = "–æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç GGP –∫–ª–∞—Å—Å–∞"


class BaseFigureSelectionHandler(BaseSelectionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞"""

    COMPETITION_TYPE = "base"
    STATE = States.BASE_CLASS_SELECTION
    COMPETITION_NAME = "base"
    ACTION_TEXT_SUBSCRIBED = "–ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å"
    ACTION_TEXT_UNSUBSCRIBED = "–æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞"
