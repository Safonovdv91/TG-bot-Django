from abc import ABC, abstractmethod
from telegram import Update
from telegram.ext import ContextTypes


class KeyboardActionHandler(ABC):
    @property
    @abstractmethod
    def button_text(self) -> str:
        pass

    @abstractmethod
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        pass


class SendTrackHandler(KeyboardActionHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞"""

    @property
    def button_text(self) -> str:
        return "üó∫Ô∏è –í—ã—Å–ª–∞—Ç—å –∫–∞—Ä—Ç—É GGP"

    async def _get_active_stage(self):
        from g_cup_site.models import StageModel

        return await StageModel.objects.filter(status="–ü—Ä–∏—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤").afirst()

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        active_stage = await self._get_active_stage()
        if active_stage and active_stage.track_url:
            await update.message.reply_text(
                text=f"–¢—Ä–∞—Å—Å–∞ –¥–ª—è —ç—Ç–∞–ø–∞ '{active_stage.title}':\n{active_stage.track_url}"
            )
        else:
            await update.message.reply_text(
                text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ —Å—Ç–∞–¥–∏–∏ '–ü—Ä–∏—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'."
            )
